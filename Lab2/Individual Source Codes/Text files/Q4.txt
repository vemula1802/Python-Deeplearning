from keras.preprocessing.sequence import pad_sequences
from keras.layers import Embedding, LSTM, Dense, Dropout
from keras.preprocessing.text import Tokenizer
from keras.callbacks import EarlyStopping
from keras.models import Sequential
import keras.utils as ku
# from tensorflow import set_random_seed
# from numpy.random import seed
# tensorflow.random.set_seed(x2)
# seed(1)
import pandas as pd
import numpy as np
import string, os
# from tensorflow import set_random_seed
from numpy.random import seed
# set_random_seed(2)
seed(1)
import tensorflow as tf
tf.random.set_seed(2) 
import pandas as pd
import numpy as np
import string, os 
dir = '/content/newyork_headline.zip'
headlines = []
for filename in os.listdir(dir):
    if 'Articles' in filename:
        print(filename)
        articledata = pd.read_csv(dir + filename)
        headlines.extend(list(articledata.headline.values))
        

headlines = [h for h in headlines if h != "Unknown"]
len(headlines)
def clean_text(txt):
    txt = "".join(v for v in txt if v not in string.punctuation).lower()
    txt = txt.encode("utf8").decode("ascii",'ignore')
    return txt 

data = [clean_text(x) for x in headlines]
data[:10]
tokenizer = Tokenizer()

def get_sequence_of_tokens(data):
    ## tokenization
    tokenizer.fit_on_texts(data)
    total_words = len(tokenizer.word_index) + 1
    print(total_words)
    
    input_sequences = []
    for line in data:
        token_list = tokenizer.texts_to_sequences([line])[0]
        for i in range(1, len(token_list)):
            n_gram_sequence = token_list[:i+1]
            input_sequences.append(n_gram_sequence)
    return input_sequences, total_words

inp_sequences, total_words = get_sequence_of_tokens(data)
inp_sequences[:10]
def generate_padded_sequences(sequences):
    max_sequence_len = max([len(x) for x in sequences])
    sequences = np.array(pad_sequences(sequences, maxlen=max_sequence_len, padding='pre'))
    
    predictors, label = sequences[:,:-1],sequences[:,-1]
    label = ku.to_categorical(label, num_classes=total_words)
    return predictors, label, max_sequence_len

predictors, label, max_sequence_len = generate_padded_sequences(inp_sequences)
#model creation
input_len = max_sequence_len - 1
model = Sequential()
model.add(Embedding(total_words, 10, input_length=input_len))
model.add(LSTM(100))
model.add(Dropout(0.1))
model.add(Dense(total_words, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam')
model.summary()
history = model.fit(predictors, label, epochs=100, verbose=5)
def generate_text(seed_text, next_words, model, max_sequence_len):
    for _ in range(next_words):
        token_list = tokenizer.texts_to_sequences([seed_text])[0]
        token_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')
        predicted = model.predict_classes(token_list, verbose=0)
        
        output_word = ""
        for word,index in tokenizer.word_index.items():
            if index == predicted:
                output_word = word
                break
        seed_text += " "+output_word
    return seed_text.title()
print(generate_text("united states", 5, model, max_sequence_len))
print(generate_text("joe biden", 20, model, max_sequence_len))
print(generate_text("donald trump", 9, model, max_sequence_len))

